#include <iostream>
#include <vector>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <limits> 
using namespace std;

int gridSize = 3;
int winLength = 3;
vector<vector<string>> board;

void drawBoard() {
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridSize; j++) {
            cout << setw(2) << board[i][j];
            if (j != gridSize - 1) cout << " | ";
        }
        cout << "\n";
        if (i != gridSize - 1) {
            for (int k = 0; k < gridSize; k++) {
                cout << "---";
                if (k != gridSize - 1) cout << "+";
            }
            cout << "\n";
        }
    }
    cout << "\n";
}

void resetBoard() {
    board.clear();
    int num = 1;
    for (int i = 0; i < gridSize; i++) {
        vector<string> row;
        for (int j = 0; j < gridSize; j++) {
            row.push_back(to_string(num++));
        }
        board.push_back(row);
    }
}

bool placeMarker(int slot, string marker) {
    if (slot < 1 || slot > gridSize * gridSize) return false;
    int row = (slot - 1) / gridSize;
    int col = (slot - 1) % gridSize;
    if (board[row][col] == "X" || board[row][col] == "O") return false;
    board[row][col] = marker;
    return true;
}

bool checkSequence(int startRow, int startCol, int dRow, int dCol) {
    string first = board[startRow][startCol];
    if (first != "X" && first != "O") return false;
    for (int k = 1; k < winLength; k++) {
        int r = startRow + k * dRow;
        int c = startCol + k * dCol;
        if (r < 0 || r >= gridSize || c < 0 || c >= gridSize) return false;
        if (board[r][c] != first) return false;
    }
    return true;
}

bool winner() {
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < gridSize; j++) {
            if (checkSequence(i, j, 0, 1)) return true;
            if (checkSequence(i, j, 1, 0)) return true;
            if (checkSequence(i, j, 1, 1)) return true;
            if (checkSequence(i, j, 1, -1)) return true;
        }
    }
    return false;
}

bool isFull() {
    for (int i = 0; i < gridSize; i++)
        for (int j = 0; j < gridSize; j++)
            if (board[i][j] != "X" && board[i][j] != "O") return false;
    return true;
}

int computerMove() {
    int slot;
    do {
        slot = rand() % (gridSize * gridSize) + 1;
    } while (!placeMarker(slot, "O"));
    return slot;
}

void multiplayerGame() {
    string currentMarker = "X";
    int currentPlayer = 1;
    drawBoard();
    while (true) {
        cout << "Player " << currentPlayer << " (" << currentMarker << ") enter slot: ";
        int slot;
        if (!(cin >> slot)) { 
            cout << " Invalid input! Please enter a number.\n";
            cin.clear(); 
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
            continue;
        }
        if (!placeMarker(slot, currentMarker)) {
            cout << "Invalid move! Try again.\n";
            continue;
        }
        drawBoard();
        if (winner()) {
            cout << "Player " << currentPlayer << " wins!\n";
            break;
        }
        if (isFull()) {
            cout << "It's a draw!\n";
            break;
        }
        currentMarker = (currentMarker == "X") ? "O" : "X";
        currentPlayer = (currentPlayer == 1) ? 2 : 1;
    }
}

void singlePlayerGame() {
    string playerMarker = "X";
    drawBoard();
    while (true) {
        int slot;
        cout << "Your turn (X), enter slot: ";
        if (!(cin >> slot)) { 
            cout << " Invalid input! Please enter a number.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }
        if (!placeMarker(slot, playerMarker)) {
            cout << "Invalid move! Try again.\n";
            continue;
        }
        drawBoard();
        if (winner()) {
            cout << "You win!\n";
            break;
        }
        if (isFull()) {
            cout << "It's a draw!\n";
            break;
        }
        cout << "Computer's turn...\n";
        computerMove();
        drawBoard();
        if (winner()) {
            cout << "Computer wins!\n";
            break;
        }
        if (isFull()) {
            cout << "It's a draw!\n";
            break;
        }
    }
}

int main() {
    srand(time(0));
    char playAgain;

    do {
        int choice;

        while (true) {
            cout << "/TIC TAC TOE GAME*\n";
            cout << "1. Multiplayer (Player vs Player)\n";
            cout << "2. Single Player (Player vs Computer)\n";
            cout << "Enter your choice: ";
            if (!(cin >> choice)) {
                cout << " Invalid input! Please enter a number.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
            if (choice == 1 || choice == 2) break;
            cout << " Invalid choice! Please enter 1 or 2.\n";
        }

        int gridChoice;
        while (true) {
            cout << "Choose a grid:\n";
            cout << "1. 3x3 (Win = 3 in a row)\n";
            cout << "2. 5x5 (Win = 4 in a row)\n";
            cout << "3. 7x7 (Win = 5 in a row)\n";
            cout << "Choose Your grid: ";
            if (!(cin >> gridChoice)) {
                cout << " Invalid input! Please enter a number.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
            if (gridChoice == 1) { gridSize = 3; winLength = 3; break; }
            else if (gridChoice == 2) { gridSize = 5; winLength = 4; break; }
            else if (gridChoice == 3) { gridSize = 7; winLength = 5; break; }
            else cout << " Invalid grid size! Please try again.\n";
        }

        resetBoard();

        if (choice == 1) {
            multiplayerGame();
        } else {
            singlePlayerGame();
        }

        cout << "\nDo you want to play again? (y/n): ";
        cin >> playAgain;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); 

    } while (playAgain == 'y' || playAgain == 'Y');

    cout << "Thanks for playing!\n";
    return 0;
}
